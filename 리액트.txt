1.  수업 소개 
1-1. 리액트 란?
- 페이스북의 ui를 더 잘 만들기 위해서 페이스북에서 만든 자바스크립트 ui 라이브러리
- 사용자 정의 태그를 만들어 주는 기능 = Component

1-2. 컴포넌트 (Component) 
- 가독성 높임 
- 재사용성 가능
- 유지보수 편리 

2. 공부 전략 
- 코딩(coding) 
- 실행 (run)
- 디플로이: 소비자에게 전달 (deploy) 

3. 개발환경의 종류 (*공식 문서에 익숙해 질 것!) 
참고 사이트 https://reactjs.org/
3-1. Add React to a Website
- 부분적으로 리액트 기능을 추가 할 때
- 초급 사용자들에게 까다로울 수 있음 

3-2. Create a New React App (*수업 사용) 
-  Toolchain : 리액트로 앱을 개발 할 때, 목표를 달성하기 위해서 필요한 개발 환경 및 도구를 제공
- npm : node.js 를 이용해서 만들어진 앱을 명령어 환경에서 손쉽게 설치 할 수 있도록 도와주는 도구 ( node.js 계의 앱스토어, 구글 플레이어 역할을 하는 소프트 웨어) 


4. npm을 이용해서 Create React App 설치 
참고 사이트 https://nodejs.org/en/

4-1. npm설치 
LTS는 안정화된 버전 , Current는 가장 최신화 버전 
window키 + R  ->  cmd 입력 -> nmp-v 입력 -> 숫자 나오면 설치 성공

4-2. Create React App 설치 
4-2-1. npm install -g creat-react-app
- npm install -g : 어디에서든지 실행 
- ERR 떴을 때 ' sudo npm install -g creat-react-app ' 다시 입력 
- ' creat-react-app -V ' 입력하여 설치 확인 

장점 : 한번 다운로드 받고 이후 추가적인 다운로드 필요 없음
단점 : 최신 버전을 사용하지 못 할 수 있음 

4-2-2. npx create-react-app
-임시로 설치하여 한번만 실행하는 방법 
장점:
- 컴퓨터 공간을 낭비 하지 않음 
- 항상 최신버전이 react를 사용할 수 있다.
단점:  매번 새롭게 다운로드 받아야 한다. 

5. create react app을 이용해서 개발환경구축 
- cd 입력  
- 디렉토리 드래그 (경로 자동 입력 됨) 
- create-react-app . 

6. 샘플 웹앱 실행 
- terminal 실행  npm run start 
- 실행 되지 않을 때  welcome 페이지에서 open folder로 디렉토리 열기 
(해당 디렉토리 단독으로 실행 되어야 함) 

7.  JS 코딩하는 법 
- public > index.html  에서 id=root 안에 컴포넌트가 입력됨
- src > index.js 에서  <App />안에서 내용이 입력 및 수정 됨 
- document.getElementById( 'root' )  =>  <App /> 파일을 root로 가져감
-  src > App.js  에서  <App /> 내용을 보고, 입력 및 수정 할 수 있음 

* App.js 파일의 입력 방식을 함수방식에서 클라스 방식으로 바꿀 때,  오류 또는 실행이 되지 않는 경우에는 파일 '첫 줄'에    
import React, { Component } from 'react'; 또 함께 입력 되었는지 확인!  

8.  CSS 코딩하는 법 
- index.css 
- App.css : App.js 안에 있는 리액트의 컴퍼넌트가 로드 됐을 때, 실행되는 디자인 파일 

- 사용자 정의 컴퍼넌트 App의 이름은 수정 가능 (이름이 같아야함) 
but 파일의 이름은 수정되면 안됨.

9. 배포하는 법
build 할 때 : terminal에서 npm run build 입력 --> build 폴더 생성 
 
- npm run start : react 기능들이 많이 들어있어서 용량이 크다. 
- npm run build : 개발완료 후에 생성, 용량을 줄여준다. 

- npm install -g serve : 컴퓨터 어디에서느 serve 라는 명령어를 통해서 웹서버를 설치 할 수 있음 
- npx serve :  한번만 실행 시킬 웹서버를 실행 시킴 
- npx serve -s build : serve라는 웹서버를 다운로드 받아서 실행시킬 때, 
build라는 디렉토리를 document root로 하겠다는 의미 

10. 리액트가 없다면 
pure.html 

11. 컴포넌트 만들기
- 컴포너트를 만들때, 반드시 하나의 최상위 태그로 시작해야 한다.


12. props (컴포넌트의 속성) 
사용방법 : 리액트 사이트 > Docs > MAIN CONCEPTS > 4. 

기본 포맷: 
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}

- 속성 값을 이용해서 하나의 태그로  다른 내용이 입력 될 수 있도록 
- <subject>는 언제나 똑같은 값이 출력 되었음 
- props를 이용하여 입력값에 따라 출력 값이 다를 수 있도록 함 

13. React Develper Tools
설치 사이트: https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-devtools-profiler

(리액트 사이트 >  Docs > ADVANCED GUIDES > Optimizing  Performance) 

 React Developer Tools : 개발자 도구에서 컴포넌트를 볼 수 있음 (리액트 분석)

14. 컴포넌트 파일로 분리하기
export default name;  : 설정한 class를 외부에서 사용할 수 있도록 

15-1. State소개
 -Props: 사용자가 컴포넌트를 사용하는 입장에서 중요한 것 (사용하는 쪽)
 -State: props값에 따라서 내부의 구현에 필요한 데이터들 (구현하는 쪽)

15-2. State사용
class App extends Component {

  constructor(props){
    super(props);
    this.state = {
      Subject:{title:'WEB', sub:'world wide web!'}
    }
  }

  render() {
    return (

      <div className="App">
        <Subject 
          title={this.state.Subject.title} 
          sub={this.state.Subject.sub}>
        </Subject>
        <TOC></TOC>
        <Content title="HTML" desc="HTML is Hyper Text Markup Language."></Content>  
      </div>
      
    );
  }
  
}

- 어떤 컴포넌트가 실행 될 때, render함수 보다 먼저 실행이 되면서 컴포넌트를 초기화시켜 주고 싶은 코드는 constructor 안에다가 코드를 작성한다.
=> 컴포넌트가 실행 될 때,   constructor함수는 제일 먼저 실행되어서 초기화를 담당한다.  

- 리액트에서 props에서 따옴표(" ")로 묶어주면 문자 처리 
- 자바스크립트 코드로 실행 되게 하려면  { } 사용 
- 상위 컴퍼넌트의 상태를 하위 컴퍼넌트로 전달하고 싶을 때,  
상위 컴퍼넌트의 state값을 하위 컴퍼넌트의 props값으로 전달 가능! 

15-3. key
 - property에 여러 값을 줄 때,  
- TOC 안에 있는 데이터들을 App의 내부 state를 TOC에 주입 해주는 것을 통해
자동으로 데이터가 바뀌도록  
- TOC의 부모가 갖고 있는 state를 이용해서 TOC의 내부 데이터가 바뀌도록
- 주의 할 점 : 여러개의 elements를 자동으로 생성하는 경우에는 콘솔 에러 발생 
Each child in a list should have a unique "key" prop.
: key값을 정해 줘야 한다. => 리액트에서 요청하는 것

16-1. 이벤트 state props 그리고 render함수 
 - 역동성 있는 사이트를 만들기 위한 요소 : 이벤트, state, props

- 페이지의 구분을 위해서 state에 mode 값 설정 

- props 또는 state의 값이 바뀌면 해당되는 컴포넌트의 render 함수가 다시 호출    => 화면이 다시 그려진다.  
- render 함수 : 어떤 html을 그릴 것인지 결정하는 역할 

16-2. 이벤트 설치 
- 버튼을 클릭했을 때, 해당 값 호출 
- onclick(순수자바스크립트 코드) onClick(리액트 코드) 

 - debugger; --> debugger를 사용한 부분에서 실행이 멈춤 
- e.preventDefault :  이벤트의 기본동작을 막음 ex) a태그의 기본적인 동작방법(리로드)을 못하게 막음 

16-3. 이벤트에서 state 변경하기 
this.state.mode = 'welcome';  ---> 에러 발생 
- 이벤트가 호출됐을 때 실행되는 함수 안에서는 this의 값은 아무 값도 설정 되어 있는 않는다. 
- .bind(this)를 추가해 준다

this.state.mode = 'welcome';  ---> 리액트에서 인지하지 못함, 값 변경X 
- this.setState({mode:'welcome'});  코드로 변경하여 입력

16-4. 이벤트 bind함수 이해하기 
- render 함수 안에서 this는 컴포넌트 자신을 가르킨다. 
- 하지만, render 함수 안에 있는 함수에 this를 호출했을 때, this 값이 아무것도 
없이 호출 되는 경우가 발생할 수 있다. 
- 함수 안에 this값이 없을 때,  .bind(this)를 추가한다.

16-5. 이벤트 setState함수 이해하기
- 컴포넌트 생성 후,  동적으로 state 값을 변경 할 때는 
this.state.mode = 'welcome';  사용 불가 ---> 리액트가 변경 값을 인지 할 수 없음 , 렌더가 호출되지 않음 
- this.setState({ mode: 'welcome'; }) 로 사용 해야함
- state의 값이 바뀌면 setState로 바꿔줘야 한다. 

- constructor함수에서 변경 할 때는 
this.state.mode = 'welcome';  방법사용 가능 



















